library(dplyr)
library(maps)
library(ggplot2)
mpg
%>%
filter
(year
==
2008, manufacturer
==
"nissan")
%>%
ggplot
(
aes
(x=
paste
(model, displ, trans), y=cty))
+
geom_col
()
n2008 <- mpg %>% filter(year==2008, manufacturer=="nissan") %>% ggplot(aes(x=paste(model, displ, trans), y=cty)) + geom_col()
ggplot(n2008, aes(paste(model, displ, trans), cty)) + geom_col()
ggplot(n2008, aes(paste(model, displ, trans), cty)) + geom_col()
library(ggplot2)
ggplot(n2008, aes(paste(model, displ, trans), cty)) + geom_col()
library(dplyr)
ggplot(n2008, aes(paste(model, displ, trans), cty)) + geom_col()
library(maps)
ggplot(n2008, aes(paste(model, displ, trans), cty)) + geom_col()
ggplot(n2008, aes(paste(model, displ, trans), cty)) + geom_col()
fr <- map_data("france")
ggplot(fr, aes(long, lat, group=group)) + geom_polygon(col="darkred", fill="gray80") + coord_map()
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.4")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.4")
detach("package:maps", unload=TRUE)
library("maps", lib.loc="~/R/win-library/3.4")
ggplot(fr, aes(long, lat, group=group)) + geom_polygon(col="darkred", fill="gray80") + coord_map()
shiny::runApp('Info 201/Example')
runApp('Info 201/Example')
runApp('Info 201/Example')
library(shiny)
ui <- fluidPage(
mainPanel(
textOutput("hello")
)
)
server <- funciton(input,output){
output$hello <- renderText("hello world")
}
shinyApp((ui = ui, server = server))
library(shiny)
ui <- fluidPage(
mainPanel(
textOutput("hello")
)
)
server <- funciton(input, output){
output$hello <- renderText("hello world")
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
mainPanel(
textOutput("hello")
)
)
server <- function(input, output) {
output$hello <- renderText("hello world")
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
output$hello <- renderText({}
paste("You said:", input$response)
})
server <- function(input, output) {
output$hello <- renderText({
paste("You said:", input$response)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
mainPanel(
textInput("response", level= "Say something.", "hello")
textOutput("comment")
)
)
server <- function(input, output) {
output$hello <- renderText({
paste("You said:", input$response)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
mainPanel(
textInput("response", level= "Say something.", "hello")
textOutput("comment")
)
)
server <- function(input, output) {
output$hello <- renderText({
paste("You said:", input$response)
})
}
shinyApp(ui = ui, server = server)
output$comment <- renderText({
paste("You said:", input$response)
})
library(shiny)
ui <- fluidPage(
mainPanel(
textInput("response", level= "Say something.", "hello")
textOutput("comment")
)
)
server <- function(input, output) {
output$comment <- renderText({
paste("You said:", input$response)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
mainPanel(
textInput("response", level= "Say something.", "hello")
textOutput("comment")
)
)
server <- function(input, output) {
output$comment <- renderText({
paste("You said:", input$response)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
mainPanel(
textInput("response", level= "Say something.", "hello"),
textOutput("comment")
)
)
library(shiny)
ui <- fluidPage(
mainPanel(
textInput("response", level= "Say something.", "hello"),
textOutput("comment")
)
)
server <- function(input, output) {
output$comment <- renderText({
paste("You said:", input$response)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
mainPanel(
textInput("response", label= "Say something.", "hello"),
textOutput("comment")
)
)
server <- function(input, output) {
output$comment <- renderText({
paste("You said:", input$response)
})
}
shinyApp(ui = ui, server = server)
runApp('Info 201/ch16-shiny/demo-3')
runApp('Info 201/ch16-shiny/demo-3')
runApp('Info 201/ch16-shiny/demo-3')
runApp('Info 201/ch16-shiny/demo-3')
runApp('Info 201/ch16-shiny/demo-3')
runApp('Info 201/ch16-shiny/demo-3')
runApp('Info 201/ch16-shiny/demo-3')
runApp('Info 201/ch16-shiny/demo-3')
intro <- readLines("bb-group2-Fina-Project/Intro.html")
setwd("Info 201/final-project/")
intro <- readLines("bb-group2-Fina-Project/Intro.html")
intro <- readLines("bb-group2-Final-Project/Intro.html")
shiny::runApp('BB-group2-Final-Project')
output$Intro <- renderText({
intro <- readLines("bb-group2-Final-Project/Intro.html")  })
intro <- readLines("bb-group2-Final-Project/Intro.html")
output$Intro <- renderText({
intro <- readLines("bb-group2-Final-Project/Intro.html")  })
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
shinyUI(navbarPage("Sleeping Alone",
tabPanel("Intro", fluidPage(
htmlOutput('Intro')
)
),
tabPanel("Background",
titlePanel("Background Information"),
mainPanel()
),
tabPanel("Graph"),
tabPanel("Graph"),
tabPanel("Conclusion")
))
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
sleeping.data <- read.csv("sleeping.data.csv")
shinyServer(function(input, output) {
output$Intro <- renderText({
intro <- readLines("bb-group2-Final-Project/Intro.html")  })
})
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
})
output$Intro <- renderText({
intro <- readLines("bb-group2-Final-Project/Intro.html")  })
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
shinyUI(navbarPage("Sleeping Alone",
tabPanel("Intro", fluidPage(
htmlOutput('Intro')
)
),
tabPanel("Background",
titlePanel("Background Information"),
mainPanel()
),
tabPanel("Graph"),
tabPanel("Graph"),
tabPanel("Conclusion")
))
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
sleeping.data <- read.csv("sleeping.data.csv")
shinyServer(function(input, output) {
output$Intro <- renderText({
intro <- readLines("bb-group2-Final-Project/Intro.html")  })
})
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
})
output$Intro <- renderText({
intro <- readLines("bb-group2-Final-Project/Intro.html")  })
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
sleeping.data <- read.csv("sleeping.data.csv")
shinyServer(function(input, output) {
output$Intro <- renderText({
intro <- readLines("bb-group2-Final-Project/Intro.html")  })
})
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
})
